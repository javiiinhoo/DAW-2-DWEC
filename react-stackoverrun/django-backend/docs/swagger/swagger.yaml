openapi: "3.0.0"
info:
  version: 2.0.0
  title: Dashboard API
servers:
  - url: http://raspi:8000/api/v2
paths:
  /dashboards:
    get:
      summary: List all dashboards
      responses:
        200:
          description: An array of dashboards
          content:
            application/json:    
              schema:
                example:
                  - id: 1
                    title: Forocoches
                    description: En este dashboard se pregunta de todo
                    last_updated: '1655203563.329757'
                  - id: 2
                    title: Foromotos
                    description: Sólo preguntas sobre motos
                    last_updated: '1655203575.629752'
  /dashboards/{dashboardId}:
    get:
      summary: Info for a specific dashboard
      parameters:
        - name: dashboardId
          in: path
          required: true
          description: The id of the dashboard to retrieve
          schema:
            type: int
          example: 1
        - name: search
          in: query
          required: false
          description: A search term to return only questions that case-insensitive match by title or description
          schema:
            type: str
          example: coches
        - name: older_than
          in: query
          required: false
          description: Only questions older than the provided timestamp will be returned. Useful for pagination
          schema:
            type: int
          example: 1655203563
        - name: page_size
          in: query
          required: false
          description: The number of questions to return in the array. Defaults to 10 if not provided
          schema:
            type: int
          example: 5
      responses:
        200:
          description: Information of the dashboard, containing questions according to request parameters, ordered by creation date
          content:
            application/json:    
              schema:
                example:
                  title: Forocoches
                  description: En este dashboard se pregunta de todo
                  last_updated: '1655203563.329757'
                  questions:
                    - question_id: 1
                      title: Sobre Lofi
                      description: ¿Por qué el Lofi es tan popular?
                      author: Pepe
                      created_at: '1655203575.629752'
  /dashboards/{dashboardId}/questions:
    post:
      summary: Create a question
      parameters:
        - name: dashboardId
          in: path
          required: true
          description: The id of the dashboard in which the question will be posted
          schema:
            type: int
          example: 1
        - name: 'Session-Token'
          in: header
          required: true
          description: The token that verifies that the user is authenticated. The answer will be created on their behalf
          schema:
            type: str
          example: 3ae2dc933772bda44330
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                title: Pitágoras
                description: ¿En qué consiste exactamente el teorema de Pitágoras?
      responses:
        201:
          description: The question was created correctly
        400:
          description: There is a missing key in the request body
        401:
          description: Session-Token header is missing or invalid
  /dashboards/{dashboardId}/questions/{questionId}:
    get:
      summary: Info for a specific question
      parameters:
        - name: dashboardId
          in: path
          required: true
          description: The id of the dashboard which the question belongs to
          schema:
            type: int
          example: 1
        - name: questionId
          in: path
          required: true
          description: The id of the question
          schema:
            type: int
          example: 1
        - name: search
          in: query
          required: false
          description: A search term to return only answers that case-insensitive match by description
          schema:
            type: str
          example: gusta
        - name: older_than
          in: query
          required: false
          description: Only answers older than the provided timestamp will be returned. Useful for pagination
          schema:
            type: int
          example: 1655203563
        - name: page_size
          in: query
          required: false
          description: The number of answers to return in the array. Defaults to 10 if not provided
          schema:
            type: int
          example: 5
      responses:
        200:
          description: Information of the question, containing answers according to request parameters, ordered by creation date
          content:
            application/json:
              schema:
                example:
                  dashboard_title: Forocoches
                  question_title: Sobre Lofi
                  question_author: Pepe
                  question: ¿Por qué el Lofi es tan popular?
                  created_at: '1655203575.629752'
                  answers:
                    - answer_id: 1
                      description: Ni idea, a mi me gusta
                      author: Jane Doe
                      created_at: '1655203588.526751'
                    - answer_id: 2
                      description: ¿Lofi? ¿Eso qué es?
                      author: John Doe
                      created_at: '1655203700.002673'
  /dashboards/{dashboardId}/questions/{questionId}/answers:
    post:
      summary: Create an answer
      parameters:
        - name: dashboardId
          in: path
          required: true
          description: The id of the dashboard in which the question will be posted
          schema:
            type: int
          example: 1
        - name: questionId
          in: path
          required: true
          description: The id of the question being answered
          schema:
            type: int
          example: 1
        - name: 'Session-Token'
          in: header
          required: true
          description: The token that verifies that the user is authenticated. The answer will be created on their behalf
          schema:
            type: str
          example: 3ae2dc933772bda44330
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                description: La respuesta definitiva es 42
      responses:
        201:
          description: The answer was created correctly
        400:
          description: There is a missing key in the request body
        401:
          description: Session-Token header is missing or invalid
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                username: pepe.depura
                password: 1234
                password_confirm: 1234
      responses:
        201:
          description: The user was created correctly
        400:
          description: There is a missing key in the request body or passwords to not match
        409:
          description: A user with the given username already exists
  /sessions:
    post:
      summary: Create a new session. This is, perform a login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                username: pepe.depura
                password: 1234
      responses:
        201:
          description: The session was created correctly. The token that is used to authenticate the user in future request is returned in the response body here
          content:
            application/json:
              schema:
                example:
                  created: True
                  session_id: 12
                  session_token: 3ae2dc933772bda44330
        400:
          description: There is a missing key in the request body
        401:
          description: The password is incorrect
        404:
          description: The user was not found
  /sessions/{sessionId}:
    delete:
      summary: Remove a session. This is, perform a logout
      parameters:
        - name: sessionId
          in: path
          required: true
          description: The id of the session to remove
          schema:
            type: int
          example: 12
        - name: 'Session-Token'
          in: header
          required: true
          description: The token that verifies that the user is authenticated
          schema:
            type: str
          example: 3ae2dc933772bda44330
      responses:
        200:
          description: The session was deleted correctly.
          content:
            application/json:
              schema:
                example:
                  deleted: True
        401:
          description: Session-Token header is missing or invalid
